TODO:
make sure moap 1.1 and 1.2 is supported fully
Better WSDL support Client and server (how much validation is needed here?)
UDDI??
make internal refrences for moap encoding (use seralization logic)
add ini option for always moap_error_handler
provide user space overriding of serialization certin objects and types
serialization in general needs to be polished/finished... all xsd types
make perstistant objects and work with or without register_globals on
look to see if php-moap will work with out always_populate_raw_post_data on
see if client will work with ssl.. should be eaiser with php_streams
work on moap seralizer (php serialization)
-work on a moap-service 'regiestry' and 'proxy' (apache moap style)
-convert all string mainpulation to use smart_str
make the 'moap' packet abstract.. maybe incorperate xml-rpc
make the transport layer abstract.. what other transport layers are needed?... who uses smtp? what about jabber?
make $moap_object->data = 'text'; maybe invoke a set_*() and/or get_*() method
when using wsdls and function names are similar find the best match
	void test(int);
	void test(string);
	maybe use the same alogrithim as ext/java.
investigate further http keep_alive... inital testing proved slower.. maybe php_streams will speed things up..
provide schema 1999/2001 support....
through memory leak testing
possible using shared memory for sdl caching...
api for clearing/checking sdl caching...
make php-moap work as a standalone server using php_streams and the new socket extension
http authication
proxy support
wsdl generation static and auto (.net style (http://server.com/moapserver.php?WSDL)) using phpdoc parsing engine
interpo testing...
BENCHMARKING...... lets prove how fast it is.
do some more work on website

does this list stop... what exactly have i done?
im sure im forgetting 20 thousand more things....


 - brad
